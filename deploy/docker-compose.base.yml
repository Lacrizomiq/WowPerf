# This file is used to define the base services for the docker-compose.yml file.
# It is used to define the services that are shared between the local, development and production environments.

version: "3.8"

services:
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=Europe/Paris
    networks:
      - traefik-public
    restart: unless-stopped

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: runner
    volumes:
      - ../frontend:/app:cached
      - frontend_node_modules:/app/node_modules:delegated
      - frontend_next:/app/.next:delegated
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    networks:
      - traefik-public
      - internal
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../backend:/app:cached
      - backend_go:/go:delegated
      - ../backend/internal/database/migrations/files:/app/internal/database/migrations/files
      - ../backend/data/static:/app/data/static:ro
    environment:
      - TZ=Europe/Paris
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=disable
      - REDIS_URL=redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - BLIZZARD_CLIENT_ID=${BLIZZARD_CLIENT_ID}
      - BLIZZARD_CLIENT_SECRET=${BLIZZARD_CLIENT_SECRET}
      - ENVIRONMENT=${ENVIRONMENT}
      - FRONTEND_URL=${FRONTEND_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - BLIZZARD_REDIRECT_URL=${BLIZZARD_REDIRECT_URL}
    networks:
      - traefik-public
      - internal
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15.3
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - TZ=Europe/Paris
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    networks:
      - internal
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  adminer:
    image: adminer
    restart: always
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=nette
      - TZ=Europe/Paris
    networks:
      - internal
      - traefik-public
    depends_on:
      - db

networks:
  traefik-public:
    external: true
  internal:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
  frontend_next:
  backend_go:
