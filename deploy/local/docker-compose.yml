services:
  traefik:
    image: traefik:v2.10
    command:
      - "--configFile=/etc/traefik/config.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./certs:/certs:ro
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
    restart: unless-stopped

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../../frontend:/app:cached
      - frontend_node_modules:/app/node_modules:delegated
      - frontend_next:/app/.next:delegated
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${FRONTEND_URL}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) && !PathPrefix(`/api`) && !PathPrefix(`/temporal`) && !PathPrefix(`/adminer`) && !PathPrefix(`/traefik`) && !PathPrefix(`/grafana`) && !PathPrefix(`/prometheus`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../../backend:/app:cached
      - backend_go:/go:delegated
    environment:
      - TZ=Europe/Paris
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_URL=${REDIS_URL}
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - JWT_SECRET=${JWT_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
      - FRONTEND_DASHBOARD_PATH=${FRONTEND_DASHBOARD_PATH}
      - FRONTEND_AUTH_ERROR_PATH=${FRONTEND_AUTH_ERROR_PATH}
      - ENVIRONMENT=development
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_FROM=noreply@localhost
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=strip-api@docker"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`localhost`) && PathPrefix(`/mailhog`)"
      - "traefik.http.routers.mailhog.entrypoints=websecure"
      - "traefik.http.routers.mailhog.tls=true"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    environment:
      - MH_UI_WEB_PATH=mailhog
    restart: unless-stopped

  adminer:
    image: adminer
    environment:
      - ADMINER_DEFAULT_SERVER=${DB_HOST}
      - ADMINER_DESIGN=nette
      - TZ=Europe/Paris
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`localhost`) && PathPrefix(`/adminer`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:15.3
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - TZ=Europe/Paris
    ports:
      - "5432:5432"
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  temporal-db:
    image: postgres:${POSTGRESQL_VERSION}
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    networks:
      - internal
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal -d temporal"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    networks:
      - internal
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    labels:
      - "traefik.enable=true"
      # Configuration gRPC
      - "traefik.http.routers.temporal-grpc.rule=Host(`localhost`) && PathPrefix(`/temporal-grpc`)"
      - "traefik.http.routers.temporal-grpc.entrypoints=websecure"
      - "traefik.http.routers.temporal-grpc.tls=true"
      - "traefik.http.services.temporal-grpc.loadbalancer.server.port=7233"
      - "traefik.http.services.temporal-grpc.loadbalancer.server.scheme=h2c"
    networks:
      - internal
    depends_on:
      temporal-db:
        condition: service_healthy
    ports:
      - 7233:7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 100s
      timeout: 100s
      retries: 5

  temporal-ui:
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_UI_PORT=8080
      - TEMPORAL_UI_ENABLED=true
      - TEMPORAL_UI_PUBLIC_PATH=/temporal
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.temporal-ui.rule=Host(`localhost`) && PathPrefix(`/temporal`)"
      - "traefik.http.routers.temporal-ui.entrypoints=websecure"
      - "traefik.http.routers.temporal-ui.tls=true"
      - "traefik.http.services.temporal-ui.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.temporal-ui-headers.headers.customRequestHeaders.X-Forwarded-For=${remote_addr}"
      - "traefik.http.middlewares.temporal-ui-headers.headers.customRequestHeaders.X-Real-IP=${remote_addr}"
      - "traefik.http.routers.temporal-ui.middlewares=temporal-ui-headers@docker"
    depends_on:
      temporal:
        condition: service_healthy
    restart: unless-stopped

  # Report test for rankings and reports and player builds
  report-test:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../../backend:/app:cached
      - backend_go:/go:delegated
    environment:
      - TZ=Europe/Paris
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_URL=${REDIS_URL}
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASKQUEUE=warcraft-logs-sync
      - ENVIRONMENT=development
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    command: go run cmd/report-test/main.go

  # Temporal worker for rankings and reports and player builds
  temporal-worker:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: development
    command: ["go", "run", "cmd/worker/main.go"]
    volumes:
      - ../../backend:/app:cached
      - backend_go:/go:delegated
    environment:
      - TZ=Europe/Paris
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_URL=${REDIS_URL}
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASKQUEUE=warcraft-logs-sync
      - ENVIRONMENT=development
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--web.console.libraries=/etc/prometheus/console_libraries"
  #     - "--web.console.templates=/etc/prometheus/consoles"
  #     - "--web.enable-lifecycle"
  #   networks:
  #     - traefik
  #     - internal
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`localhost`) && PathPrefix(`/prometheus`)"
  #     - "traefik.http.routers.prometheus.entrypoints=websecure"
  #     - "traefik.http.routers.prometheus.tls=true"
  #     - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana:latest
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=secure_password
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #     - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
  #     - GF_SERVER_SERVE_FROM_SUB_PATH=true
  #   networks:
  #     - traefik
  #     - internal
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`localhost`) && PathPrefix(`/grafana`)"
  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.tls=true"
  #     - "traefik.http.services.grafana.loadbalancer.server.port=3000"
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped

networks:
  traefik:
    name: traefik
  internal:
    name: internal

volumes:
  postgres_data:
  temporal_postgres_data:
  redis_data:
  frontend_node_modules:
  frontend_next:
  backend_go:
  # prometheus_data:
  # grafana_data:
