name: Deploy to Test Environment

on:
  push:
    branches: [test]

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowperf-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowperf-backend

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:test
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:test
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    environment: ENV_TEST
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:test
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:test
          cache-to: type=inline

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:test
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:test
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ENV_TEST
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "${{ vars.ENV_TEST }}" > deploy/test/.env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> deploy/test/.env
          echo "TRAEFIK_AUTH=${{ secrets.TRAEFIK_AUTH }}" >> deploy/test/.env
          echo "ACME_EMAIL=${{ secrets.ACME_EMAIL }}" >> deploy/test/.env
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> deploy/test/.env

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy/test/*,deploy/test/prometheus/*"
          target: "/home/tirrano/wowperf"
          strip_components: 2

      - name: Deploy with rollback capability
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/tirrano/wowperf
            # Sauvegarde des images actuelles
            docker compose ps -q > running_containers

            # Création des dossiers nécessaires
            mkdir -p traefik/acme prometheus
            touch traefik/acme/acme.json
            chmod 600 traefik/acme/acme.json

            # Pull des nouvelles images
            docker compose pull

            # Tentative de déploiement
            if docker compose up -d; then
              echo "Deployment successful"
              # Attendre et vérifier la santé des services
              sleep 30
              if docker compose ps | grep -q "unhealthy"; then
                echo "Unhealthy containers detected, rolling back..."
                # Restauration des anciennes images
                while read container; do
                  docker container commit $container backup_$container
                done < running_containers
                docker compose down
                # Restaurer la version précédente
                while read container; do
                  docker tag backup_$container $container
                done < running_containers
                docker compose up -d
                exit 1
              fi
            else
              echo "Deployment failed, rolling back..."
              docker compose down
              while read container; do
                docker tag backup_$container $container
              done < running_containers
              docker compose up -d
              exit 1
            fi

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Deployment to Test Environment"
          description: |
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
