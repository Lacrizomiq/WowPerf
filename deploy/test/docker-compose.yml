# deploy/test/docker-compose.yml
services:
  traefik:
    image: traefik:v2.10
    command:
      - "--configFile=/etc/traefik/config.yml"
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TRAEFIK_AUTH=${TRAEFIK_AUTH}
      - ACME_EMAIL=${ACME_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/acme:/etc/traefik/acme
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`test.wowperf.com`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.middlewares=basic-auth@file"
      - "traefik.http.routers.dashboard.tls=true"
    restart: unless-stopped

  frontend:
    image: ${DOCKERHUB_USERNAME}/wowperf-frontend:test
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`test.wowperf.com`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    restart: unless-stopped

  backend:
    image: ${DOCKERHUB_USERNAME}/wowperf-backend:test
    environment:
      - TZ=Europe/Paris
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - BLIZZARD_CLIENT_ID=${BLIZZARD_CLIENT_ID}
      - BLIZZARD_CLIENT_SECRET=${BLIZZARD_CLIENT_SECRET}
      - BLIZZARD_REDIRECT_URL=${BLIZZARD_REDIRECT_URL}
      - BLIZZARD_REGION=${BLIZZARD_REGION}
      - ENVIRONMENT=test
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`test.wowperf.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=strip-api@docker"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15.3
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - TZ=Europe/Paris
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    networks:
      - internal
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  traefik:
    name: traefik
  internal:
    name: internal

volumes:
  postgres_data:
  redis_data:
