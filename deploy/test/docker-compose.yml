# deploy/test/docker-compose.yml
services:
  traefik:
    image: traefik:v2.10
    command:
      - "--configFile=/etc/traefik/config.yml"
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CF_API_KEY}
      - ACME_EMAIL=${ACME_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/acme:/etc/traefik/acme
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`test.wowperf.com`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.middlewares=basic-auth@file,security-headers@file"
      - "traefik.http.routers.dashboard.tls.certresolver=cloudflare"
      # Cloudflare configuration
      - "traefik.http.middlewares.cloudflare-ipwhitelist.ipwhitelist.sourcerange=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22"
      - "traefik.http.middlewares.cf-real-ip.headers.customrequestheaders.X-Real-IP=CF-Connecting-IP"
    restart: unless-stopped

  frontend:
    image: ${DOCKERHUB_USERNAME}/wowperf-frontend:test
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`test.wowperf.com`) && !PathPrefix(`/api`, `/traefik`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=cloudflare"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.service=frontend-service@docker"
    environment:
      - HOSTNAME=0.0.0.0
      - PORT=3000
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}

    restart: unless-stopped

  backend:
    image: ${DOCKERHUB_USERNAME}/wowperf-backend:test
    environment:
      - TZ=Europe/Paris
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - BLIZZARD_CLIENT_ID=${BLIZZARD_CLIENT_ID}
      - BLIZZARD_CLIENT_SECRET=${BLIZZARD_CLIENT_SECRET}
      - BLIZZARD_REDIRECT_URL=${BLIZZARD_REDIRECT_URL}
      - BLIZZARD_REGION=${BLIZZARD_REGION}
      - WARCRAFTLOGS_CLIENT_ID=${WARCRAFTLOGS_CLIENT_ID}
      - WARCRAFTLOGS_CLIENT_SECRET=${WARCRAFTLOGS_CLIENT_SECRET}
      - ENVIRONMENT=test
      - MAILTRAP_USER=${MAILTRAP_USER}
      - MAILTRAP_PASS=${MAILTRAP_PASS}
    networks:
      - traefik
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`test.wowperf.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=websecure"
      - "traefik.http.routers.backend-api.tls=true"
      - "traefik.http.services.backend-api.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend-api.middlewares=strip-api@docker"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15.3
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - TZ=Europe/Paris
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    networks:
      - internal
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  traefik:
    name: traefik
  internal:
    name: internal

volumes:
  postgres_data:
  redis_data:
